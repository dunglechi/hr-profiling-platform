name: Test Suite CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install pytest pytest-cov pytest-mock

    - name: Run verification tests
      run: |
        python verify_fixes.py

    - name: Run all unit tests
      run: |
        cd backend
        python -m pytest src/__tests__/test_database_service_batch.py -v
        python -m pytest src/__tests__/test_disc_pipeline_comprehensive.py -v
        python -m pytest src/__tests__/test_security_validation.py -v

    - name: Run tests with coverage
      run: |
        cd backend
        python -m pytest src/__tests__/ --cov=src/services --cov=src/routes --cov-report=xml --cov-report=term

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: ./backend/coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Archive test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          backend/coverage.xml
          backend/htmlcov/

  lint:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pylint black isort

    - name: Run flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 backend/src --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 backend/src --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Check code formatting with black
      run: |
        black --check backend/src || echo "Code needs formatting"

    - name: Check import sorting with isort
      run: |
        isort --check-only backend/src || echo "Imports need sorting"

  security:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run bandit security scanner
      run: |
        bandit -r backend/src -f json -o bandit-report.json || true
        bandit -r backend/src

    - name: Check for known vulnerabilities
      run: |
        pip install -r backend/requirements.txt
        safety check --json || echo "Some vulnerabilities found"

    - name: Upload security reports
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
