// This is your Prisma schema file
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  role      String   @default("CANDIDATE") // Changed from enum to string
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  candidate Candidate?
  
  @@map("users")
}

model Candidate {
  id        String   @id @default(cuid())
  userId    String   @unique
  fullName  String
  birthDate DateTime
  phone     String?
  cvFile    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  assessments Assessment[]
  
  @@map("candidates")
}

model JobPosition {
  id           String @id @default(cuid())
  title        String
  description  String
  requirements String   // JSON as string for SQLite
  weights      String   // JSON as string for SQLite
  isActive     Boolean @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  assessments Assessment[]
  
  @@map("job_positions")
}

model Assessment {
  id           String           @id @default(cuid())
  candidateId  String
  jobPositionId String
  totalScore   Float?
  status       String @default("PENDING") // Changed from enum to string
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  candidate    Candidate    @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  jobPosition  JobPosition  @relation(fields: [jobPositionId], references: [id], onDelete: Cascade)
  discResult   DISCResult?
  mbtiResult   MBTIResult?
  numerologyResult NumerologyResult?
  cvAnalysis   CVAnalysis?
  
  @@map("assessments")
}

model DISCResult {
  id           String @id @default(cuid())
  assessmentId String @unique
  dScore       Int
  iScore       Int
  sScore       Int
  cScore       Int
  primaryStyle String
  analysis     String?
  createdAt    DateTime @default(now())

  assessment Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  
  @@map("disc_results")
}

model MBTIResult {
  id           String @id @default(cuid())
  assessmentId String @unique
  type         String // e.g., "ENFP"
  dimensions   String   // JSON as string - E/I, N/S, F/T, P/J scores
  analysis     String?
  createdAt    DateTime @default(now())

  assessment Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  
  @@map("mbti_results")
}

model NumerologyResult {
  id           String @id @default(cuid())
  assessmentId String @unique
  
  // Core Numbers
  lifePathNumber     Int
  destinyNumber      Int
  personalityNumber  Int
  soulUrgeNumber     Int
  attitudeLessonNumber Int
  
  // Additional Numbers  
  birthDayNumber     Int
  challengeNumbers   String  // JSON as string - Array of challenge numbers
  pinnacleNumbers    String  // JSON as string - Array of pinnacle numbers
  personalYearNumber Int
  
  // Analysis Results
  coreTraits         String  // JSON as string - Core personality traits
  strengths          String  // JSON as string - Natural strengths
  challenges         String  // JSON as string - Life challenges
  careerGuidance     String  // JSON as string - Career recommendations
  relationships      String  // JSON as string - Relationship patterns
  lifeCycle          String  // JSON as string - Life cycle analysis
  
  // Detailed Analysis
  analysis     String   // JSON as string - Complete detailed analysis
  compatibility String  // JSON as string - Job/career compatibility
  createdAt    DateTime @default(now())

  assessment Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  
  @@map("numerology_results")
}

model CVAnalysis {
  id           String @id @default(cuid())
  assessmentId String @unique
  skills       String   // JSON as string - Extracted skills array
  experience   String   // JSON as string - Experience breakdown
  education    String   // JSON as string - Educational background
  behavioralIndicators String // JSON as string - AI-analyzed behavioral traits
  keywordMatches String   // JSON as string - Job requirement keyword matches
  aiSummary    String?
  createdAt    DateTime @default(now())

  assessment Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  
  @@map("cv_analysis")
}

// Remove the enums - they're not supported in SQLite