import React, { useState } from 'react';
import {
  Box,
  Container,
  Typography,
  Paper,
  Button,
  Alert,
  Card,
  CardContent,
  Grid,
  Radio,
  RadioGroup,
  FormControlLabel,
  FormControl,
  FormLabel,
  Backdrop,
  CircularProgress,
  Divider
} from '@mui/material';
import { BarChart, Psychology, AutoAwesome } from '@mui/icons-material';
import { assessmentAPI } from '../lib/supabase';

interface DISCResult {
  scores: {
    D: number;
    I: number;
    S: number;
    C: number;
  };
  primaryStyle: string;
  description: string;
  strengths: string[];
  challenges: string[];
  workStyle: string;
  communicationStyle: string;
}

const SimpleDISC: React.FC = () => {
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [answers, setAnswers] = useState<Record<number, string>>({});
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [result, setResult] = useState<DISCResult | null>(null);
  const [userName, setUserName] = useState('');

  const questions = [
    {
      id: 0,
      text: "Trong nh√≥m l√†m vi·ªác, b·∫°n th∆∞·ªùng:",
      options: [
        { value: "D", text: "D·∫´n d·∫Øt v√† ƒë∆∞a ra quy·∫øt ƒë·ªãnh" },
        { value: "I", text: "T·∫°o kh√¥ng kh√≠ vui v·∫ª v√† hƒÉng h√°i" },
        { value: "S", text: "H·ªó tr·ª£ v√† l·∫Øng nghe m·ªçi ng∆∞·ªùi" },
        { value: "C", text: "Ph√¢n t√≠ch v√† ƒë∆∞a ra gi·∫£i ph√°p chi ti·∫øt" }
      ]
    },
    {
      id: 1,
      text: "Khi ƒë·ªëi m·∫∑t v·ªõi th√°ch th·ª©c:",
      options: [
        { value: "D", text: "H√†nh ƒë·ªông ngay l·∫≠p t·ª©c ƒë·ªÉ gi·∫£i quy·∫øt" },
        { value: "I", text: "T√¨m ki·∫øm s·ª± h·ªó tr·ª£ t·ª´ ng∆∞·ªùi kh√°c" },
        { value: "S", text: "C√¢n nh·∫Øc k·ªπ l∆∞·ª°ng tr∆∞·ªõc khi quy·∫øt ƒë·ªãnh" },
        { value: "C", text: "Thu th·∫≠p th√¥ng tin v√† ph√¢n t√≠ch k·ªπ c√†ng" }
      ]
    },
    {
      id: 2,
      text: "Trong giao ti·∫øp, b·∫°n th√≠ch:",
      options: [
        { value: "D", text: "N√≥i th·∫≥ng, ƒëi th·∫≥ng v√†o v·∫•n ƒë·ªÅ" },
        { value: "I", text: "Tr√≤ chuy·ªán th√¢n thi·ªán v√† nhi·ªát t√¨nh" },
        { value: "S", text: "L·∫Øng nghe v√† th·∫•u hi·ªÉu" },
        { value: "C", text: "Tr√¨nh b√†y logic v√† c√≥ cƒÉn c·ª©" }
      ]
    },
    {
      id: 3,
      text: "M√¥i tr∆∞·ªùng l√†m vi·ªác l√Ω t∆∞·ªüng c·ªßa b·∫°n l√†:",
      options: [
        { value: "D", text: "ƒê·∫ßy th√°ch th·ª©c v√† c·∫°nh tranh" },
        { value: "I", text: "NƒÉng ƒë·ªông v√† c√≥ nhi·ªÅu t∆∞∆°ng t√°c" },
        { value: "S", text: "·ªîn ƒë·ªãnh v√† h√≤a ƒë·ªìng" },
        { value: "C", text: "C√≥ t·ªï ch·ª©c v√† ch√≠nh x√°c" }
      ]
    },
    {
      id: 4,
      text: "Khi l√†m vi·ªác trong d·ª± √°n:",
      options: [
        { value: "D", text: "Mu·ªën ki·ªÉm so√°t ti·∫øn ƒë·ªô v√† k·∫øt qu·∫£" },
        { value: "I", text: "T·∫≠p trung v√†o vi·ªác truy·ªÅn c·∫£m h·ª©ng cho team" },
        { value: "S", text: "ƒê·∫£m b·∫£o m·ªçi ng∆∞·ªùi c·∫£m th·∫•y tho·∫£i m√°i" },
        { value: "C", text: "Ch√∫ √Ω ƒë·∫øn chi ti·∫øt v√† ch·∫•t l∆∞·ª£ng" }
      ]
    }
  ];

  const handleAnswerChange = (questionId: number, value: string) => {
    setAnswers(prev => ({ ...prev, [questionId]: value }));
    setError('');
  };

  const nextQuestion = () => {
    if (!answers[currentQuestion]) {
      setError('Vui l√≤ng ch·ªçn m·ªôt ƒë√°p √°n');
      return;
    }
    
    if (currentQuestion < questions.length - 1) {
      setCurrentQuestion(currentQuestion + 1);
    } else {
      calculateResult();
    }
  };

  const prevQuestion = () => {
    if (currentQuestion > 0) {
      setCurrentQuestion(currentQuestion - 1);
    }
  };

  const calculateResult = async () => {
    setLoading(true);
    
    try {
      // Calculate DISC scores
      const scores = { D: 0, I: 0, S: 0, C: 0 };
      
      Object.values(answers).forEach(answer => {
        scores[answer as keyof typeof scores]++;
      });

      // Determine primary style
      const maxScore = Math.max(...Object.values(scores));
      const primaryStyle = Object.entries(scores).find(([_, score]) => score === maxScore)?.[0] || 'D';
      
      const styleDescriptions = {
        D: 'Dominant - B·∫°n l√† ng∆∞·ªùi quy·∫øt ƒëo√°n, th√≠ch l√£nh ƒë·∫°o v√† ƒë·ªëi m·∫∑t v·ªõi th√°ch th·ª©c',
        I: 'Influential - B·∫°n l√† ng∆∞·ªùi h∆∞·ªõng ngo·∫°i, th√≠ch giao ti·∫øp v√† truy·ªÅn c·∫£m h·ª©ng',
        S: 'Steady - B·∫°n l√† ng∆∞·ªùi ·ªïn ƒë·ªãnh, ƒë√°ng tin c·∫≠y v√† h·ªó tr·ª£ t·ªët',
        C: 'Compliant - B·∫°n l√† ng∆∞·ªùi c·∫©n th·∫≠n, c√≥ t·ªï ch·ª©c v√† ch√∫ √Ω chi ti·∫øt'
      };

      const styleStrengths = {
        D: ['Quy·∫øt ƒëo√°n', 'L√£nh ƒë·∫°o', 'D√°m ch·∫•p nh·∫≠n r·ªßi ro', 'H√†nh ƒë·ªông nhanh'],
        I: ['Giao ti·∫øp t·ªët', 'L·∫°c quan', 'Thuy·∫øt ph·ª•c', 'S√°ng t·∫°o'],
        S: ['Ki√™n nh·∫´n', 'ƒê√°ng tin c·∫≠y', 'H·ªó tr·ª£ t·ªët', 'L·∫Øng nghe'],
        C: ['Ch√≠nh x√°c', 'C√≥ t·ªï ch·ª©c', 'Ph√¢n t√≠ch t·ªët', 'Ch·∫•t l∆∞·ª£ng cao']
      };

      const styleChallenges = {
        D: ['C√≥ th·ªÉ qu√° c·ª©ng r·∫Øn', 'Thi·∫øu ki√™n nh·∫´n', '√çt ch√∫ √Ω ƒë·∫øn c·∫£m x√∫c'],
        I: ['C√≥ th·ªÉ thi·∫øu chi ti·∫øt', 'D·ªÖ b·ªã ph√¢n t√¢m', 'Qu√° l·∫°c quan'],
        S: ['Ch·∫≠m th√≠ch nghi', 'Tr√°nh xung ƒë·ªôt', 'Kh√≥ t·ª´ ch·ªëi'],
        C: ['Qu√° c·∫ßu to√†n', 'Ch·∫≠m quy·∫øt ƒë·ªãnh', 'Tr√°nh r·ªßi ro']
      };

      const workStyles = {
        D: 'L√†m vi·ªác ƒë·ªôc l·∫≠p, th√≠ch ki·ªÉm so√°t v√† ƒë·∫°t k·∫øt qu·∫£ nhanh',
        I: 'L√†m vi·ªác nh√≥m, th√≠ch m√¥i tr∆∞·ªùng s√¥i ƒë·ªông v√† c√≥ nhi·ªÅu t∆∞∆°ng t√°c',
        S: 'L√†m vi·ªác ·ªïn ƒë·ªãnh, th√≠ch m√¥i tr∆∞·ªùng h√≤a ƒë·ªìng v√† h·ªó tr·ª£ l·∫´n nhau',
        C: 'L√†m vi·ªác c·∫©n th·∫≠n, th√≠ch m√¥i tr∆∞·ªùng c√≥ quy tr√¨nh v√† chu·∫©n m·ª±c cao'
      };

      const communicationStyles = {
        D: 'Tr·ª±c ti·∫øp, ng·∫Øn g·ªçn, t·∫≠p trung v√†o k·∫øt qu·∫£',
        I: 'Nhi·ªát t√¨nh, th√¢n thi·ªán, t·∫≠p trung v√†o con ng∆∞·ªùi',
        S: 'Ki√™n nh·∫´n, l·∫Øng nghe, t·∫≠p trung v√†o s·ª± h√≤a h·ª£p',
        C: 'Logic, chi ti·∫øt, t·∫≠p trung v√†o d·ªØ li·ªáu v√† s·ª± ch√≠nh x√°c'
      };

      const calculatedResult: DISCResult = {
        scores,
        primaryStyle,
        description: styleDescriptions[primaryStyle as keyof typeof styleDescriptions],
        strengths: styleStrengths[primaryStyle as keyof typeof styleStrengths],
        challenges: styleChallenges[primaryStyle as keyof typeof styleChallenges],
        workStyle: workStyles[primaryStyle as keyof typeof workStyles],
        communicationStyle: communicationStyles[primaryStyle as keyof typeof communicationStyles]
      };

      // Save to database
      try {
        await assessmentAPI.saveResult({
          user_id: `anonymous_${Date.now()}`,
          assessment_type: 'DISC',
          result_data: calculatedResult
        });
      } catch (saveError) {
        console.warn('Could not save to database:', saveError);
      }

      // Simulate processing time
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      setResult(calculatedResult);
      
    } catch (error) {
      setError('C√≥ l·ªói x·∫£y ra khi t√≠nh to√°n k·∫øt qu·∫£. Vui l√≤ng th·ª≠ l·∫°i.');
    } finally {
      setLoading(false);
    }
  };

  const resetAssessment = () => {
    setCurrentQuestion(0);
    setAnswers({});
    setResult(null);
    setError('');
  };

  const getStyleColor = (style: string) => {
    const colors = { D: '#e53e3e', I: '#d69e2e', S: '#38a169', C: '#3182ce' };
    return colors[style as keyof typeof colors] || '#718096';
  };

  return (
    <Container maxWidth="md" sx={{ py: 4 }}>
      {/* Loading Backdrop */}
      <Backdrop
        sx={{ 
          color: '#fff', 
          zIndex: (theme) => theme.zIndex.drawer + 1,
          backdropFilter: 'blur(4px)'
        }}
        open={loading}
      >
        <Box textAlign="center">
          <CircularProgress size={60} sx={{ color: '#e91e63', mb: 2 }} />
          <Typography variant="h6">üìä ƒêang ph√¢n t√≠ch phong c√°ch DISC...</Typography>
          <Typography variant="body2" sx={{ mt: 1, opacity: 0.8 }}>
            Vui l√≤ng ch·ªù trong gi√¢y l√°t
          </Typography>
        </Box>
      </Backdrop>

      {/* Header */}
      <Paper
        elevation={8}
        sx={{
          background: 'linear-gradient(135deg, #e91e63 0%, #ad1457 100%)',
          color: 'white',
          p: 4,
          textAlign: 'center',
          borderRadius: 3,
          mb: 4
        }}
      >
        <BarChart sx={{ fontSize: 48, mb: 2, opacity: 0.9 }} />
        <Typography variant="h3" gutterBottom sx={{ fontWeight: 'bold' }}>
          üìä ƒê√°nh Gi√° DISC
        </Typography>
        <Typography variant="h6" sx={{ opacity: 0.9 }}>
          Kh√°m ph√° phong c√°ch h√†nh vi v√† giao ti·∫øp c·ªßa b·∫°n
        </Typography>
      </Paper>

      {error && (
        <Alert severity="error" sx={{ mb: 3 }}>
          {error}
        </Alert>
      )}

      {!result ? (
        /* Assessment Questions */
        <Paper elevation={4} sx={{ p: 4, borderRadius: 3 }}>
          <Box sx={{ mb: 3 }}>
            <Typography variant="h6" sx={{ mb: 1 }}>
              C√¢u h·ªèi {currentQuestion + 1} / {questions.length}
            </Typography>
            <Box sx={{ width: '100%', bgcolor: 'grey.200', borderRadius: 1, height: 8 }}>
              <Box
                sx={{
                  width: `${((currentQuestion + 1) / questions.length) * 100}%`,
                  bgcolor: '#e91e63',
                  height: 8,
                  borderRadius: 1,
                  transition: 'width 0.3s ease'
                }}
              />
            </Box>
          </Box>

          <Typography variant="h5" sx={{ mb: 3, fontWeight: 'bold' }}>
            {questions[currentQuestion].text}
          </Typography>

          <FormControl component="fieldset" sx={{ width: '100%' }}>
            <RadioGroup
              value={answers[currentQuestion] || ''}
              onChange={(e) => handleAnswerChange(currentQuestion, e.target.value)}
            >
              {questions[currentQuestion].options.map((option, index) => (
                <Paper
                  key={index}
                  elevation={answers[currentQuestion] === option.value ? 3 : 1}
                  sx={{
                    p: 2,
                    mb: 2,
                    border: answers[currentQuestion] === option.value ? '2px solid #e91e63' : '1px solid transparent',
                    cursor: 'pointer',
                    transition: 'all 0.3s ease'
                  }}
                  onClick={() => handleAnswerChange(currentQuestion, option.value)}
                >
                  <FormControlLabel
                    value={option.value}
                    control={<Radio sx={{ color: '#e91e63' }} />}
                    label={
                      <Typography variant="body1" sx={{ fontWeight: 500 }}>
                        {option.text}
                      </Typography>
                    }
                    sx={{ width: '100%', m: 0 }}
                  />
                </Paper>
              ))}
            </RadioGroup>
          </FormControl>

          <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 4 }}>
            <Button
              variant="outlined"
              onClick={prevQuestion}
              disabled={currentQuestion === 0}
              sx={{ px: 3 }}
            >
              Quay l·∫°i
            </Button>
            
            <Button
              variant="contained"
              onClick={nextQuestion}
              sx={{
                px: 4,
                bgcolor: '#e91e63',
                '&:hover': { bgcolor: '#ad1457' }
              }}
            >
              {currentQuestion === questions.length - 1 ? 'Ho√†n th√†nh' : 'Ti·∫øp t·ª•c'}
            </Button>
          </Box>
        </Paper>
      ) : (
        /* Results Display */
        <Box>
          <Paper elevation={4} sx={{ p: 4, borderRadius: 3, mb: 3 }}>
            <Typography variant="h4" gutterBottom sx={{ fontWeight: 'bold', color: 'primary.main' }}>
              üìä K·∫øt Qu·∫£ ƒê√°nh Gi√° DISC
            </Typography>

            {/* DISC Scores */}
            <Grid container spacing={3} sx={{ mb: 4 }}>
              {Object.entries(result.scores).map(([style, score]) => (
                <Grid item xs={6} md={3} key={style}>
                  <Card sx={{ 
                    textAlign: 'center', 
                    bgcolor: `${getStyleColor(style)}15`,
                    border: `2px solid ${getStyleColor(style)}`,
                    transform: style === result.primaryStyle ? 'scale(1.05)' : 'scale(1)',
                    transition: 'transform 0.3s ease'
                  }}>
                    <CardContent>
                      <Typography variant="h2" sx={{ 
                        color: getStyleColor(style), 
                        fontWeight: 'bold' 
                      }}>
                        {style}
                      </Typography>
                      <Typography variant="h4" sx={{ 
                        color: getStyleColor(style),
                        fontWeight: 'bold',
                        mb: 1
                      }}>
                        {score}
                      </Typography>
                      {style === result.primaryStyle && (
                        <Typography variant="body2" sx={{ 
                          fontWeight: 'bold',
                          color: getStyleColor(style)
                        }}>
                          Phong c√°ch ch√≠nh
                        </Typography>
                      )}
                    </CardContent>
                  </Card>
                </Grid>
              ))}
            </Grid>

            <Divider sx={{ my: 3 }} />

            {/* Primary Style Description */}
            <Paper sx={{ 
              p: 3, 
              mb: 3, 
              bgcolor: `${getStyleColor(result.primaryStyle)}15`,
              border: `2px solid ${getStyleColor(result.primaryStyle)}`
            }}>
              <Typography variant="h5" gutterBottom sx={{ 
                color: getStyleColor(result.primaryStyle),
                fontWeight: 'bold'
              }}>
                üéØ Phong C√°ch Ch√≠nh: {result.primaryStyle}
              </Typography>
              <Typography variant="body1" sx={{ fontSize: '16px', lineHeight: 1.7 }}>
                {result.description}
              </Typography>
            </Paper>

            <Grid container spacing={3} sx={{ mb: 3 }}>
              <Grid item xs={12} md={6}>
                <Paper sx={{ p: 3, bgcolor: '#f0fff4', border: '1px solid #38a169' }}>
                  <Typography variant="h6" gutterBottom sx={{ color: '#38a169', fontWeight: 'bold' }}>
                    üí™ ƒêi·ªÉm M·∫°nh
                  </Typography>
                  {result.strengths.map((strength, index) => (
                    <Typography key={index} sx={{ mb: 1 }}>
                      ‚Ä¢ {strength}
                    </Typography>
                  ))}
                </Paper>
              </Grid>
              
              <Grid item xs={12} md={6}>
                <Paper sx={{ p: 3, bgcolor: '#fff5f5', border: '1px solid #e53e3e' }}>
                  <Typography variant="h6" gutterBottom sx={{ color: '#e53e3e', fontWeight: 'bold' }}>
                    ‚ö†Ô∏è ƒêi·ªÉm C·∫ßn C·∫£i Thi·ªán
                  </Typography>
                  {result.challenges.map((challenge, index) => (
                    <Typography key={index} sx={{ mb: 1 }}>
                      ‚Ä¢ {challenge}
                    </Typography>
                  ))}
                </Paper>
              </Grid>
            </Grid>

            <Grid container spacing={3} sx={{ mb: 3 }}>
              <Grid item xs={12} md={6}>
                <Paper sx={{ p: 3, bgcolor: '#f7fafc', border: '1px solid #3182ce' }}>
                  <Typography variant="h6" gutterBottom sx={{ color: '#3182ce', fontWeight: 'bold' }}>
                    üíº Phong C√°ch L√†m Vi·ªác
                  </Typography>
                  <Typography>
                    {result.workStyle}
                  </Typography>
                </Paper>
              </Grid>
              
              <Grid item xs={12} md={6}>
                <Paper sx={{ p: 3, bgcolor: '#fffaf0', border: '1px solid #d69e2e' }}>
                  <Typography variant="h6" gutterBottom sx={{ color: '#d69e2e', fontWeight: 'bold' }}>
                    üí¨ Phong C√°ch Giao Ti·∫øp
                  </Typography>
                  <Typography>
                    {result.communicationStyle}
                  </Typography>
                </Paper>
              </Grid>
            </Grid>

            <Box sx={{ textAlign: 'center', mt: 4 }}>
              <Button
                variant="contained"
                size="large"
                onClick={resetAssessment}
                sx={{
                  px: 4,
                  py: 2,
                  borderRadius: 2,
                  bgcolor: '#e91e63',
                  '&:hover': { bgcolor: '#ad1457' },
                  fontWeight: 'bold'
                }}
              >
                üîÑ L√†m L·∫°i ƒê√°nh Gi√°
              </Button>
            </Box>
          </Paper>
        </Box>
      )}
    </Container>
  );
};

export default SimpleDISC;