import React, { useState } from 'react';
import {
  Box,
  Container,
  Typography,
  Paper,
  Button,
  Alert,
  Card,
  CardContent,
  Grid,
  Radio,
  RadioGroup,
  FormControlLabel,
  FormControl,
  Backdrop,
  CircularProgress,
  Divider,
  Chip
} from '@mui/material';
import { Work, Psychology } from '@mui/icons-material';
import { assessmentAPI } from '../lib/supabase';

interface MBTIResult {
  type: string;
  description: string;
  characteristics: string[];
  strengths: string[];
  challenges: string[];
  careerSuggestions: string[];
  workPreferences: string[];
  communicationStyle: string;
}

const SimpleMBTI: React.FC = () => {
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [answers, setAnswers] = useState<Record<number, string>>({});
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [result, setResult] = useState<MBTIResult | null>(null);

  const questions = [
    {
      id: 0,
      dimension: 'E/I',
      text: "Trong m·ªôt b·ªØa ti·ªác, b·∫°n th∆∞·ªùng:",
      options: [
        { value: "E", text: "T√¨m hi·ªÉu v√† tr√≤ chuy·ªán v·ªõi nhi·ªÅu ng∆∞·ªùi m·ªõi" },
        { value: "I", text: "N√≥i chuy·ªán s√¢u v·ªõi m·ªôt v√†i ng∆∞·ªùi quen" }
      ]
    },
    {
      id: 1,
      dimension: 'E/I',
      text: "Sau m·ªôt ng√†y d√†i, b·∫°n c·∫£m th·∫•y tho·∫£i m√°i nh·∫•t khi:",
      options: [
        { value: "E", text: "G·∫∑p g·ª° b·∫°n b√® ho·∫∑c tham gia ho·∫°t ƒë·ªông x√£ h·ªôi" },
        { value: "I", text: "·ªû nh√† m·ªôt m√¨nh ho·∫∑c v·ªõi ng∆∞·ªùi th√¢n" }
      ]
    },
    {
      id: 2,
      dimension: 'S/N',
      text: "Khi h·ªçc ƒëi·ªÅu g√¨ ƒë√≥ m·ªõi, b·∫°n th√≠ch:",
      options: [
        { value: "S", text: "T√¨m hi·ªÉu c√°c b∆∞·ªõc c·ª• th·ªÉ v√† v√≠ d·ª• th·ª±c t·∫ø" },
        { value: "N", text: "Hi·ªÉu √Ω t∆∞·ªüng t·ªïng quan v√† kh·∫£ nƒÉng ·ª©ng d·ª•ng" }
      ]
    },
    {
      id: 3,
      dimension: 'S/N',
      text: "B·∫°n tin t∆∞·ªüng h∆°n v√†o:",
      options: [
        { value: "S", text: "Kinh nghi·ªám v√† d·ªØ li·ªáu c·ª• th·ªÉ" },
        { value: "N", text: "Tr·ª±c gi√°c v√† kh·∫£ nƒÉng s√°ng t·∫°o" }
      ]
    },
    {
      id: 4,
      dimension: 'T/F',
      text: "Khi ƒë∆∞a ra quy·∫øt ƒë·ªãnh quan tr·ªçng:",
      options: [
        { value: "T", text: "Ph√¢n t√≠ch logic v√† c√¢n nh·∫Øc ∆∞u nh∆∞·ª£c ƒëi·ªÉm" },
        { value: "F", text: "C√¢n nh·∫Øc c·∫£m x√∫c v√† t√°c ƒë·ªông ƒë·∫øn m·ªçi ng∆∞·ªùi" }
      ]
    },
    {
      id: 5,
      dimension: 'T/F',
      text: "Trong xung ƒë·ªôt, ƒëi·ªÅu quan tr·ªçng nh·∫•t l√†:",
      options: [
        { value: "T", text: "T√¨m ra gi·∫£i ph√°p c√¥ng b·∫±ng v√† logic" },
        { value: "F", text: "Duy tr√¨ m·ªëi quan h·ªá v√† s·ª± h√≤a h·ª£p" }
      ]
    },
    {
      id: 6,
      dimension: 'J/P',
      text: "B·∫°n th√≠ch l√†m vi·ªác:",
      options: [
        { value: "J", text: "Theo k·∫ø ho·∫°ch chi ti·∫øt v√† deadline r√µ r√†ng" },
        { value: "P", text: "Linh ho·∫°t v√† th√≠ch nghi v·ªõi t√¨nh hu·ªëng" }
      ]
    },
    {
      id: 7,
      dimension: 'J/P',
      text: "Cu·ªëi tu·∫ßn l√Ω t∆∞·ªüng c·ªßa b·∫°n l√†:",
      options: [
        { value: "J", text: "C√≥ l·ªãch tr√¨nh c·ª• th·ªÉ v√† ho√†n th√†nh c√¥ng vi·ªác" },
        { value: "P", text: "T·ª± do quy·∫øt ƒë·ªãnh v√† kh√°m ph√° ƒëi·ªÅu m·ªõi" }
      ]
    }
  ];

  const handleAnswerChange = (questionId: number, value: string) => {
    setAnswers(prev => ({ ...prev, [questionId]: value }));
    setError('');
  };

  const nextQuestion = () => {
    if (!answers[currentQuestion]) {
      setError('Vui l√≤ng ch·ªçn m·ªôt ƒë√°p √°n');
      return;
    }
    
    if (currentQuestion < questions.length - 1) {
      setCurrentQuestion(currentQuestion + 1);
    } else {
      calculateResult();
    }
  };

  const prevQuestion = () => {
    if (currentQuestion > 0) {
      setCurrentQuestion(currentQuestion - 1);
    }
  };

  const calculateResult = async () => {
    setLoading(true);
    
    try {
      // Calculate MBTI type
      const dimensions = { E: 0, I: 0, S: 0, N: 0, T: 0, F: 0, J: 0, P: 0 };
      
      Object.values(answers).forEach(answer => {
        dimensions[answer as keyof typeof dimensions]++;
      });

      const type = 
        (dimensions.E > dimensions.I ? 'E' : 'I') +
        (dimensions.S > dimensions.N ? 'S' : 'N') +
        (dimensions.T > dimensions.F ? 'T' : 'F') +
        (dimensions.J > dimensions.P ? 'J' : 'P');

      const typeDescriptions: Record<string, any> = {
        'ENTJ': {
          description: 'The Commander - Nh√† l√£nh ƒë·∫°o t·ª± nhi√™n, quy·∫øt ƒëo√°n v√† c√≥ t·∫ßm nh√¨n strategically',
          characteristics: ['L√£nh ƒë·∫°o m·∫°nh m·∫Ω', 'T∆∞ duy chi·∫øn l∆∞·ª£c', 'Quy·∫øt ƒëo√°n', 'C√≥ t·ªï ch·ª©c'],
          strengths: ['Kh·∫£ nƒÉng l√£nh ƒë·∫°o xu·∫•t s·∫Øc', 'T∆∞ duy logic', 'C√≥ t·∫ßm nh√¨n d√†i h·∫°n', 'Quy·∫øt ƒëo√°n'],
          challenges: ['C√≥ th·ªÉ qu√° nghi√™m kh·∫Øc', 'Thi·∫øu ki√™n nh·∫´n', '√çt ch√∫ √Ω ƒë·∫øn c·∫£m x√∫c'],
          careerSuggestions: ['CEO', 'Qu·∫£n l√Ω c·∫•p cao', 'T∆∞ v·∫•n kinh doanh', 'Lu·∫≠t s∆∞', 'Ch√≠nh tr·ªã gia'],
          workPreferences: ['M√¥i tr∆∞·ªùng th√°ch th·ª©c', 'V·ªã tr√≠ l√£nh ƒë·∫°o', 'D·ª± √°n chi·∫øn l∆∞·ª£c'],
          communicationStyle: 'Tr·ª±c ti·∫øp, r√µ r√†ng v√† t·∫≠p trung v√†o m·ª•c ti√™u'
        },
        'ENTP': {
          description: 'The Debater - S√°ng t·∫°o, ƒë·ªïi m·ªõi v√† th√≠ch th·ª≠ th√°ch c√°c √Ω t∆∞·ªüng',
          characteristics: ['S√°ng t·∫°o', 'Linh ho·∫°t', 'Nhi·ªát t√¨nh', 'Th√≠ch tranh lu·∫≠n'],
          strengths: ['T∆∞ duy s√°ng t·∫°o', 'Th√≠ch nghi t·ªët', 'Truy·ªÅn c·∫£m h·ª©ng', 'Gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ'],
          challenges: ['D·ªÖ nh√†m ch√°n', 'Kh√≥ t·∫≠p trung l√¢u', 'Tr√°nh chi ti·∫øt'],
          careerSuggestions: ['Doanh nh√¢n', 'Nh√† s√°ng t·∫°o', 'T∆∞ v·∫•n', 'Nh√† nghi√™n c·ª©u', 'Marketer'],
          workPreferences: ['M√¥i tr∆∞·ªùng s√°ng t·∫°o', 'D·ª± √°n ƒëa d·∫°ng', 'T·ª± do s√°ng t·∫°o'],
          communicationStyle: 'Nhi·ªát t√¨nh, s√°ng t·∫°o v√† th√≠ch th·∫£o lu·∫≠n √Ω t∆∞·ªüng'
        },
        'ENFJ': {
          description: 'The Protagonist - Truy·ªÅn c·∫£m h·ª©ng v√† h·ªó tr·ª£ ng∆∞·ªùi kh√°c ph√°t tri·ªÉn',
          characteristics: ['ƒê·ªìng c·∫£m', 'Truy·ªÅn c·∫£m h·ª©ng', 'C√≥ t·ªï ch·ª©c', 'Quan t√¢m ng∆∞·ªùi kh√°c'],
          strengths: ['K·ªπ nƒÉng giao ti·∫øp xu·∫•t s·∫Øc', 'ƒê·ªìng c·∫£m cao', 'L√£nh ƒë·∫°o t·ª± nhi√™n', 'ƒê·ªông vi√™n t·ªët'],
          challenges: ['Qu√° quan t√¢m ng∆∞·ªùi kh√°c', 'D·ªÖ b·ªã stress', 'Kh√≥ t·ª´ ch·ªëi'],
          careerSuggestions: ['Gi√°o vi√™n', 'T∆∞ v·∫•n', 'HR Manager', 'Nh√† t√¢m l√Ω', 'Coach'],
          workPreferences: ['L√†m vi·ªác v·ªõi ng∆∞·ªùi', 'Ph√°t tri·ªÉn nh√¢n t√†i', 'M√¥i tr∆∞·ªùng h·ªó tr·ª£'],
          communicationStyle: '·∫§m √°p, khuy·∫øn kh√≠ch v√† t·∫≠p trung v√†o con ng∆∞·ªùi'
        },
        'ENFP': {
          description: 'The Campaigner - Nhi·ªát t√¨nh, s√°ng t·∫°o v√† lu√¥n t√¨m ki·∫øm kh·∫£ nƒÉng m·ªõi',
          characteristics: ['Nhi·ªát t√¨nh', 'S√°ng t·∫°o', 'Linh ho·∫°t', 'Quan t√¢m ng∆∞·ªùi kh√°c'],
          strengths: ['S√°ng t·∫°o', 'Giao ti·∫øp t·ªët', 'Th√≠ch nghi cao', 'Truy·ªÅn c·∫£m h·ª©ng'],
          challenges: ['D·ªÖ b·ªã ph√¢n t√¢m', 'Kh√≥ t·∫≠p trung', 'Tr√°nh xung ƒë·ªôt'],
          careerSuggestions: ['Nh√† b√°o', 'Ngh·ªá sƒ©', 'Marketer', 'T∆∞ v·∫•n', 'Entrepreneur'],
          workPreferences: ['M√¥i tr∆∞·ªùng s√°ng t·∫°o', 'Linh ho·∫°t th·ªùi gian', 'T∆∞∆°ng t√°c v·ªõi ng∆∞·ªùi'],
          communicationStyle: 'Nhi·ªát t√¨nh, s√°ng t·∫°o v√† truy·ªÅn c·∫£m h·ª©ng'
        }
        // C√≥ th·ªÉ th√™m c√°c type kh√°c...
      };

      const defaultResult = {
        description: 'M·ªôt nh√¢n c√°ch ƒë·ªôc ƒë√°o v·ªõi nh·ªØng ƒë·∫∑c ƒëi·ªÉm ri√™ng bi·ªát',
        characteristics: ['T∆∞ duy ƒë·ªôc l·∫≠p', 'C√≥ c√° t√≠nh ri√™ng', 'Kh·∫£ nƒÉng th√≠ch nghi'],
        strengths: ['T∆∞ duy logic', 'Giao ti·∫øp t·ªët', 'L√†m vi·ªác nh√≥m', 'S√°ng t·∫°o'],
        challenges: ['C·∫ßn ph√°t tri·ªÉn k·ªπ nƒÉng', 'C·∫£i thi·ªán giao ti·∫øp', 'Qu·∫£n l√Ω th·ªùi gian'],
        careerSuggestions: ['Qu·∫£n l√Ω', 'T∆∞ v·∫•n', 'Gi√°o d·ª•c', 'C√¥ng ngh·ªá', 'Kinh doanh'],
        workPreferences: ['M√¥i tr∆∞·ªùng h·ªó tr·ª£', 'C∆° h·ªôi ph√°t tri·ªÉn', 'L√†m vi·ªác nh√≥m'],
        communicationStyle: 'Th√¢n thi·ªán v√† hi·ªáu qu·∫£'
      };

      const calculatedResult: MBTIResult = {
        type,
        ...typeDescriptions[type] || defaultResult
      };

      // Save to database
      try {
        await assessmentAPI.saveResult({
          user_id: `anonymous_${Date.now()}`,
          assessment_type: 'MBTI',
          result_data: calculatedResult
        });
      } catch (saveError) {
        console.warn('Could not save to database:', saveError);
      }

      // Simulate processing time
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      setResult(calculatedResult);
      
    } catch (error) {
      setError('C√≥ l·ªói x·∫£y ra khi t√≠nh to√°n k·∫øt qu·∫£. Vui l√≤ng th·ª≠ l·∫°i.');
    } finally {
      setLoading(false);
    }
  };

  const resetAssessment = () => {
    setCurrentQuestion(0);
    setAnswers({});
    setResult(null);
    setError('');
  };

  return (
    <Container maxWidth="md" sx={{ py: 4 }}>
      {/* Loading Backdrop */}
      <Backdrop
        sx={{ 
          color: '#fff', 
          zIndex: (theme) => theme.zIndex.drawer + 1,
          backdropFilter: 'blur(4px)'
        }}
        open={loading}
      >
        <Box textAlign="center">
          <CircularProgress size={60} sx={{ color: '#4caf50', mb: 2 }} />
          <Typography variant="h6">üß† ƒêang ph√¢n t√≠ch t√≠nh c√°ch MBTI...</Typography>
          <Typography variant="body2" sx={{ mt: 1, opacity: 0.8 }}>
            Vui l√≤ng ch·ªù trong gi√¢y l√°t
          </Typography>
        </Box>
      </Backdrop>

      {/* Header */}
      <Paper
        elevation={8}
        sx={{
          background: 'linear-gradient(135deg, #4caf50 0%, #2e7d32 100%)',
          color: 'white',
          p: 4,
          textAlign: 'center',
          borderRadius: 3,
          mb: 4
        }}
      >
        <Work sx={{ fontSize: 48, mb: 2, opacity: 0.9 }} />
        <Typography variant="h3" gutterBottom sx={{ fontWeight: 'bold' }}>
          üß† Ph√¢n Lo·∫°i MBTI
        </Typography>
        <Typography variant="h6" sx={{ opacity: 0.9 }}>
          Kh√°m ph√° t√≠nh c√°ch v√† phong c√°ch l√†m vi·ªác Myers-Briggs
        </Typography>
      </Paper>

      {error && (
        <Alert severity="error" sx={{ mb: 3 }}>
          {error}
        </Alert>
      )}

      {!result ? (
        /* Assessment Questions */
        <Paper elevation={4} sx={{ p: 4, borderRadius: 3 }}>
          <Box sx={{ mb: 3 }}>
            <Typography variant="h6" sx={{ mb: 1 }}>
              C√¢u h·ªèi {currentQuestion + 1} / {questions.length}
            </Typography>
            <Box sx={{ width: '100%', bgcolor: 'grey.200', borderRadius: 1, height: 8 }}>
              <Box
                sx={{
                  width: `${((currentQuestion + 1) / questions.length) * 100}%`,
                  bgcolor: '#4caf50',
                  height: 8,
                  borderRadius: 1,
                  transition: 'width 0.3s ease'
                }}
              />
            </Box>
          </Box>

          <Typography variant="h5" sx={{ mb: 3, fontWeight: 'bold' }}>
            {questions[currentQuestion].text}
          </Typography>

          <FormControl component="fieldset" sx={{ width: '100%' }}>
            <RadioGroup
              value={answers[currentQuestion] || ''}
              onChange={(e) => handleAnswerChange(currentQuestion, e.target.value)}
            >
              {questions[currentQuestion].options.map((option, index) => (
                <Paper
                  key={index}
                  elevation={answers[currentQuestion] === option.value ? 3 : 1}
                  sx={{
                    p: 3,
                    mb: 2,
                    border: answers[currentQuestion] === option.value ? '2px solid #4caf50' : '1px solid transparent',
                    cursor: 'pointer',
                    transition: 'all 0.3s ease'
                  }}
                  onClick={() => handleAnswerChange(currentQuestion, option.value)}
                >
                  <FormControlLabel
                    value={option.value}
                    control={<Radio sx={{ color: '#4caf50' }} />}
                    label={
                      <Typography variant="body1" sx={{ fontWeight: 500 }}>
                        {option.text}
                      </Typography>
                    }
                    sx={{ width: '100%', m: 0 }}
                  />
                </Paper>
              ))}
            </RadioGroup>
          </FormControl>

          <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 4 }}>
            <Button
              variant="outlined"
              onClick={prevQuestion}
              disabled={currentQuestion === 0}
              sx={{ px: 3 }}
            >
              Quay l·∫°i
            </Button>
            
            <Button
              variant="contained"
              onClick={nextQuestion}
              sx={{
                px: 4,
                bgcolor: '#4caf50',
                '&:hover': { bgcolor: '#2e7d32' }
              }}
            >
              {currentQuestion === questions.length - 1 ? 'Ho√†n th√†nh' : 'Ti·∫øp t·ª•c'}
            </Button>
          </Box>
        </Paper>
      ) : (
        /* Results Display */
        <Box>
          <Paper elevation={4} sx={{ p: 4, borderRadius: 3, mb: 3 }}>
            <Typography variant="h4" gutterBottom sx={{ fontWeight: 'bold', color: 'primary.main' }}>
              üß† K·∫øt Qu·∫£ Ph√¢n T√≠ch MBTI
            </Typography>

            {/* MBTI Type */}
            <Box sx={{ textAlign: 'center', mb: 4 }}>
              <Chip
                label={result.type}
                sx={{
                  fontSize: '32px',
                  fontWeight: 'bold',
                  height: 80,
                  bgcolor: '#4caf50',
                  color: 'white',
                  '& .MuiChip-label': { px: 4 }
                }}
              />
              <Typography variant="h5" sx={{ mt: 2, fontWeight: 'bold', color: '#4caf50' }}>
                {result.description}
              </Typography>
            </Box>

            <Divider sx={{ my: 3 }} />

            {/* Characteristics */}
            <Paper sx={{ p: 3, mb: 3, bgcolor: '#f1f8e9', border: '1px solid #4caf50' }}>
              <Typography variant="h6" gutterBottom sx={{ color: '#4caf50', fontWeight: 'bold' }}>
                üåü ƒê·∫∑c ƒêi·ªÉm N·ªïi B·∫≠t
              </Typography>
              <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>
                {result.characteristics.map((char, index) => (
                  <Chip 
                    key={index} 
                    label={char} 
                    sx={{ bgcolor: '#4caf50', color: 'white' }}
                  />
                ))}
              </Box>
            </Paper>

            <Grid container spacing={3} sx={{ mb: 3 }}>
              <Grid item xs={12} md={6}>
                <Paper sx={{ p: 3, bgcolor: '#f0fff4', border: '1px solid #38a169' }}>
                  <Typography variant="h6" gutterBottom sx={{ color: '#38a169', fontWeight: 'bold' }}>
                    üí™ ƒêi·ªÉm M·∫°nh
                  </Typography>
                  {result.strengths.map((strength, index) => (
                    <Typography key={index} sx={{ mb: 1 }}>
                      ‚Ä¢ {strength}
                    </Typography>
                  ))}
                </Paper>
              </Grid>
              
              <Grid item xs={12} md={6}>
                <Paper sx={{ p: 3, bgcolor: '#fff5f5', border: '1px solid #e53e3e' }}>
                  <Typography variant="h6" gutterBottom sx={{ color: '#e53e3e', fontWeight: 'bold' }}>
                    ‚ö†Ô∏è ƒêi·ªÉm C·∫ßn Ph√°t Tri·ªÉn
                  </Typography>
                  {result.challenges.map((challenge, index) => (
                    <Typography key={index} sx={{ mb: 1 }}>
                      ‚Ä¢ {challenge}
                    </Typography>
                  ))}
                </Paper>
              </Grid>
            </Grid>

            <Paper sx={{ p: 3, mb: 3, bgcolor: '#f7fafc', border: '1px solid #3182ce' }}>
              <Typography variant="h6" gutterBottom sx={{ color: '#3182ce', fontWeight: 'bold' }}>
                üíº Ngh·ªÅ Nghi·ªáp Ph√π H·ª£p
              </Typography>
              <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>
                {result.careerSuggestions.map((career, index) => (
                  <Paper key={index} sx={{ px: 2, py: 1, bgcolor: '#3182ce', color: 'white', borderRadius: 2 }}>
                    <Typography variant="body2">{career}</Typography>
                  </Paper>
                ))}
              </Box>
            </Paper>

            <Grid container spacing={3} sx={{ mb: 3 }}>
              <Grid item xs={12} md={6}>
                <Paper sx={{ p: 3, bgcolor: '#fffaf0', border: '1px solid #d69e2e' }}>
                  <Typography variant="h6" gutterBottom sx={{ color: '#d69e2e', fontWeight: 'bold' }}>
                    üè¢ M√¥i Tr∆∞·ªùng L√†m Vi·ªác L√Ω T∆∞·ªüng
                  </Typography>
                  {result.workPreferences.map((pref, index) => (
                    <Typography key={index} sx={{ mb: 1 }}>
                      ‚Ä¢ {pref}
                    </Typography>
                  ))}
                </Paper>
              </Grid>
              
              <Grid item xs={12} md={6}>
                <Paper sx={{ p: 3, bgcolor: '#f3e8ff', border: '1px solid #9f7aea' }}>
                  <Typography variant="h6" gutterBottom sx={{ color: '#9f7aea', fontWeight: 'bold' }}>
                    üí¨ Phong C√°ch Giao Ti·∫øp
                  </Typography>
                  <Typography>
                    {result.communicationStyle}
                  </Typography>
                </Paper>
              </Grid>
            </Grid>

            <Box sx={{ textAlign: 'center', mt: 4 }}>
              <Button
                variant="contained"
                size="large"
                onClick={resetAssessment}
                sx={{
                  px: 4,
                  py: 2,
                  borderRadius: 2,
                  bgcolor: '#4caf50',
                  '&:hover': { bgcolor: '#2e7d32' },
                  fontWeight: 'bold'
                }}
              >
                üîÑ L√†m L·∫°i ƒê√°nh Gi√°
              </Button>
            </Box>
          </Paper>
        </Box>
      )}
    </Container>
  );
};

export default SimpleMBTI;