import React, { useState, useEffect, useCallback } from 'react';
// Translation removed - using direct Vietnamese text
import {
  Box,
  Card,
  CardContent,
  Typography,
  TextField,
  Button,
  Alert,
  CircularProgress,
  Grid,
  Divider,
  Autocomplete,
  Fade,
  Slide,
  Chip,
  InputAdornment,
  Stepper,
  Step,
  StepLabel,
  StepContent,
  Paper,
  Tooltip,
  useMediaQuery,
  useTheme
} from '@mui/material';
import {
  Person,
  CalendarToday,
  AutoAwesome,
  Clear,
  Help,
  CheckCircle,
  Psychology
} from '@mui/icons-material';
import { format, isValid } from 'date-fns';
import { vi, enUS } from 'date-fns/locale';

interface EnhancedNumerologyFormProps {
  onCalculate: (fullName: string, birthDate: Date) => void;
  loading?: boolean;
  error?: string;
}

// Common Vietnamese names for autocomplete
const vietnameseNames = [
  'Nguy·ªÖn VƒÉn An', 'Tr·∫ßn Th·ªã B√¨nh', 'L√™ VƒÉn C∆∞·ªùng', 'Ph·∫°m Th·ªã Dung',
  'Ho√†ng VƒÉn Em', 'V≈© Th·ªã Ph∆∞∆°ng', 'ƒê·∫∑ng VƒÉn Giang', 'B√πi Th·ªã Hoa',
  'ƒêinh VƒÉn Inh', 'L√Ω Th·ªã Kim', 'Ng√¥ VƒÉn Long', 'D∆∞∆°ng Th·ªã Mai',
  'Chu VƒÉn Nam', 'V√µ Th·ªã Oanh', 'Phan VƒÉn Ph√∫c', 'L∆∞u Th·ªã Qu·ª≥nh'
];

const steps = [
  'Nh·∫≠p h·ªç t√™n',
  'Ch·ªçn ng√†y sinh',
  'Xem k·∫øt qu·∫£'
];

const EnhancedNumerologyForm: React.FC<EnhancedNumerologyFormProps> = ({ 
  onCalculate, 
  loading = false, 
  error 
}) => {
  // Removed translation, using direct Vietnamese text
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));
  const isTouchDevice = useMediaQuery('(pointer: coarse)');
  
  const [fullName, setFullName] = useState('');
  const [birthDate, setBirthDate] = useState<Date | null>(null);
  const [birthDateString, setBirthDateString] = useState('');
  const [nameError, setNameError] = useState('');
  const [dateError, setDateError] = useState('');
  const [activeStep, setActiveStep] = useState(0);
  const [validationStatus, setValidationStatus] = useState<'idle' | 'validating' | 'valid' | 'invalid'>('idle');
  const [showPreview, setShowPreview] = useState(false);

  const locale = vi; // Always use Vietnamese

  // Real-time validation with debounce
  const validateName = useCallback((name: string): boolean => {
    if (!name.trim()) {
      setNameError('Vui l√≤ng nh·∫≠p h·ªç v√† t√™n');
      return false;
    }
    if (name.trim().length < 2) {
      setNameError('T√™n ph·∫£i c√≥ √≠t nh·∫•t 2 k√Ω t·ª±');
      return false;
    }
    if (!/^[a-zA-Z√Ä-·ªπƒêƒë\s]+$/.test(name.trim())) {
      setNameError('T√™n ch·ªâ ƒë∆∞·ª£c ch·ª©a ch·ªØ c√°i v√† kho·∫£ng tr·∫Øng');
      return false;
    }
    setNameError('');
    return true;
  }, []);

  const validateDate = useCallback((date: Date | null): boolean => {
    if (!date) {
      setDateError('Vui l√≤ng ch·ªçn ng√†y sinh');
      return false;
    }
    if (date > new Date()) {
      setDateError('Ng√†y sinh kh√¥ng th·ªÉ l√† t∆∞∆°ng lai');
      return false;
    }
    if (date < new Date('1900-01-01')) {
      setDateError('Ng√†y sinh kh√¥ng h·ª£p l·ªá');
      return false;
    }
    setDateError('');
    return true;
  }, []);

  // Auto-advance steps when fields are valid
  useEffect(() => {
    if (activeStep === 0 && fullName && !nameError) {
      setTimeout(() => setActiveStep(1), 500);
    }
    if (activeStep === 1 && birthDate && !dateError) {
      setTimeout(() => {
        setActiveStep(2);
        setShowPreview(true);
      }, 500);
    }
  }, [fullName, nameError, birthDate, dateError, activeStep]);

  // Real-time validation
  useEffect(() => {
    if (fullName) {
      setValidationStatus('validating');
      const timer = setTimeout(() => {
        const isValid = validateName(fullName);
        setValidationStatus(isValid ? 'valid' : 'invalid');
      }, 300);
      return () => clearTimeout(timer);
    } else {
      setValidationStatus('idle');
    }
  }, [fullName, validateName]);

  const handleNameChange = (_event: React.SyntheticEvent, value: string | null) => {
    const newName = value || '';
    setFullName(newName);
    if (nameError && newName) setNameError('');
  };

  const handleNameInputChange = (_event: React.SyntheticEvent, value: string) => {
    setFullName(value);
    if (nameError && value) setNameError('');
  };

  const handleDateChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const dateValue = e.target.value;
    setBirthDateString(dateValue);
    
    if (dateValue) {
      const parsedDate = new Date(dateValue);
      if (isValid(parsedDate)) {
        setBirthDate(parsedDate);
        validateDate(parsedDate);
      } else {
        setBirthDate(null);
        setDateError('Ng√†y sinh kh√¥ng h·ª£p l·ªá');
      }
    } else {
      setBirthDate(null);
      setDateError('');
    }
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    const nameValid = validateName(fullName);
    const dateValid = validateDate(birthDate);
    
    if (nameValid && dateValid && birthDate) {
      onCalculate(fullName.trim(), birthDate);
    }
  };

  const clearForm = () => {
    setFullName('');
    setBirthDate(null);
    setBirthDateString('');
    setNameError('');
    setDateError('');
    setActiveStep(0);
    setShowPreview(false);
    setValidationStatus('idle');
  };

  const getValidationIcon = () => {
    switch (validationStatus) {
      case 'validating':
        return <CircularProgress size={20} />;
      case 'valid':
        return <CheckCircle color="success" />;
      case 'invalid':
        return <Clear color="error" />;
      default:
        return null;
    }
  };

  return (
    <Box sx={{ maxWidth: 700, mx: 'auto', p: 3 }}>
      <Fade in timeout={800}>
        <Card elevation={8} sx={{ 
          borderRadius: 3,
          background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
          color: 'white',
          mb: 3
        }}>
          <CardContent sx={{ textAlign: 'center', py: 4 }}>
            <Psychology sx={{ fontSize: 48, mb: 2, opacity: 0.9 }} />
            <Typography variant="h3" gutterBottom sx={{ fontWeight: 'bold', mb: 1 }}>
              üåü Th·∫ßn S·ªë H·ªçc N√¢ng Cao
            </Typography>
            <Typography variant="h6" sx={{ opacity: 0.9, maxWidth: 500, mx: 'auto' }}>
              Kh√°m ph√° con s·ªë ƒë·ªãnh m·ªánh v√† ƒë·∫∑c ƒëi·ªÉm c√° nh√¢n c·ªßa b·∫°n
            </Typography>
          </CardContent>
        </Card>
      </Fade>

      <Slide in direction="up" timeout={600}>
        <Card elevation={isMobile ? 2 : 4} sx={{ 
          borderRadius: isMobile ? 2 : 3,
          mx: isMobile ? 1 : 0,
          my: isMobile ? 1 : 0
        }}>
          <CardContent sx={{ 
            p: isMobile ? 2 : 4,
            '&:last-child': { pb: isMobile ? 2 : 4 }
          }}>
            {error && (
              <Fade in>
                <Alert severity="error" sx={{ mb: 3, borderRadius: 2 }}>
                  {error}
                </Alert>
              </Fade>
            )}

            <Stepper activeStep={activeStep} orientation="vertical">
              {/* Step 1: Name Input */}
              <Step>
                <StepLabel>
                  <Typography 
                    variant={isMobile ? "subtitle1" : "h6"} 
                    color="primary"
                    sx={{ fontSize: isMobile ? '18px' : '20px' }}
                  >
                    <Person sx={{ mr: 1, verticalAlign: 'middle' }} />
                    {steps[0]}
                  </Typography>
                </StepLabel>
                <StepContent>
                  <Box sx={{ mt: 2, mb: 3 }}>
                    <Autocomplete
                      freeSolo
                      options={vietnameseNames}
                      value={fullName}
                      onChange={handleNameChange}
                      onInputChange={handleNameInputChange}
                      renderInput={(params) => (
                        <TextField
                          {...params}
                          fullWidth
                          label="H·ªç v√† t√™n ƒë·∫ßy ƒë·ªß"
                          placeholder="V√≠ d·ª•: Nguy·ªÖn VƒÉn An"
                          error={!!nameError}
                          helperText={nameError || "Nh·∫≠p h·ªç t√™n ƒë·∫ßy ƒë·ªß ƒë·ªÉ c√≥ k·∫øt qu·∫£ ch√≠nh x√°c nh·∫•t"}
                          variant="outlined"
                          disabled={loading}
                          InputProps={{
                            ...params.InputProps,
                            startAdornment: (
                              <InputAdornment position="start">
                                <Person color="primary" />
                              </InputAdornment>
                            ),
                            endAdornment: (
                              <InputAdornment position="end">
                                {getValidationIcon()}
                              </InputAdornment>
                            )
                          }}
                          sx={{
                            '& .MuiOutlinedInput-root': {
                              borderRadius: 2,
                              height: isMobile ? 56 : 'auto',
                              fontSize: isMobile ? '16px' : '14px', // Prevents zoom on iOS
                              '&:hover fieldset': {
                                borderColor: 'primary.main',
                              }
                            },
                            '& .MuiInputLabel-root': {
                              fontSize: isMobile ? '16px' : '14px'
                            },
                            '& .MuiFormHelperText-root': {
                              fontSize: isMobile ? '14px' : '12px'
                            }
                          }}
                        />
                      )}
                      renderOption={(props, option) => (
                        <Box component="li" {...props} sx={{ 
                          '&:hover': { backgroundColor: 'primary.50' }
                        }}>
                          <Person sx={{ mr: 1, color: 'primary.main' }} />
                          {option}
                        </Box>
                      )}
                    />
                    
                    {fullName && !nameError && (
                      <Fade in>
                        <Box sx={{ mt: 2 }}>
                          <Chip
                            icon={<CheckCircle />}
                            label={`H·ªç t√™n: ${fullName}`}
                            color="success"
                            variant="outlined"
                          />
                        </Box>
                      </Fade>
                    )}
                  </Box>
                </StepContent>
              </Step>

              {/* Step 2: Date Input */}
              <Step>
                <StepLabel>
                  <Typography 
                    variant={isMobile ? "subtitle1" : "h6"} 
                    color="primary"
                    sx={{ fontSize: isMobile ? '18px' : '20px' }}
                  >
                    <CalendarToday sx={{ mr: 1, verticalAlign: 'middle' }} />
                    {steps[1]}
                  </Typography>
                </StepLabel>
                <StepContent>
                  <Box sx={{ mt: 2, mb: 3 }}>
                    <TextField
                      fullWidth
                      label="Ng√†y sinh"
                      type="date"
                      value={birthDateString}
                      onChange={handleDateChange}
                      error={!!dateError}
                      helperText={dateError || "Ch·ªçn ng√†y sinh ƒë·ªÉ t√≠nh to√°n th·∫ßn s·ªë h·ªçc"}
                      variant="outlined"
                      disabled={loading}
                      InputLabelProps={{ shrink: true }}
                      InputProps={{
                        startAdornment: (
                          <InputAdornment position="start">
                            <CalendarToday color="primary" />
                          </InputAdornment>
                        )
                      }}
                      inputProps={{
                        max: format(new Date(), 'yyyy-MM-dd'),
                        min: '1900-01-01'
                      }}
                      sx={{
                        '& .MuiOutlinedInput-root': {
                          borderRadius: 2,
                          height: isMobile ? 56 : 'auto',
                          fontSize: isMobile ? '16px' : '14px',
                          '&:hover fieldset': {
                            borderColor: 'primary.main',
                          }
                        },
                        '& .MuiInputLabel-root': {
                          fontSize: isMobile ? '16px' : '14px'
                        },
                        '& .MuiFormHelperText-root': {
                          fontSize: isMobile ? '14px' : '12px'
                        }
                      }}
                    />
                    
                    {birthDate && !dateError && (
                      <Fade in>
                        <Box sx={{ mt: 2 }}>
                          <Chip
                            icon={<CheckCircle />}
                            label={`Ng√†y sinh: ${format(birthDate, 'dd/MM/yyyy', { locale })}`}
                            color="success"
                            variant="outlined"
                          />
                        </Box>
                      </Fade>
                    )}
                  </Box>
                </StepContent>
              </Step>

              {/* Step 3: Submit */}
              <Step>
                <StepLabel>
                  <Typography variant="h6" color="primary">
                    <AutoAwesome sx={{ mr: 1, verticalAlign: 'middle' }} />
                    {steps[2]}
                  </Typography>
                </StepLabel>
                <StepContent>
                  {showPreview && (
                    <Fade in timeout={800}>
                      <Paper elevation={2} sx={{ p: 3, mb: 3, borderRadius: 2, bgcolor: 'grey.50' }}>
                        <Typography variant="h6" gutterBottom color="primary">
                          <Psychology sx={{ mr: 1, verticalAlign: 'middle' }} />
                          Th√¥ng tin s·∫Ω ƒë∆∞·ª£c ph√¢n t√≠ch:
                        </Typography>
                        <Grid container spacing={2}>
                          <Grid item xs={12} sm={6}>
                            <Typography variant="body1">
                              <strong>üë§ H·ªç t√™n:</strong> {fullName}
                            </Typography>
                          </Grid>
                          <Grid item xs={12} sm={6}>
                            <Typography variant="body1">
                              <strong>üìÖ Ng√†y sinh:</strong> {birthDate && format(birthDate, 'dd/MM/yyyy', { locale })}
                            </Typography>
                          </Grid>
                        </Grid>
                        
                        <Divider sx={{ my: 2 }} />
                        
                        <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
                          <strong>üîç Ph√¢n t√≠ch s·∫Ω bao g·ªìm:</strong>
                        </Typography>
                        <Grid container spacing={1}>
                          {[
                            'üî¢ C√°c s·ªë c·ªët l√µi v√† √Ω nghƒ©a',
                            'üéØ H∆∞·ªõng nghi·ªáp ph√π h·ª£p',
                            'üí™ ƒêi·ªÉm m·∫°nh v√† th√°ch th·ª©c',
                            'üîÑ Chu k·ª≥ ph√°t tri·ªÉn cu·ªôc ƒë·ªùi'
                          ].map((item, index) => (
                            <Grid item xs={12} sm={6} key={index}>
                              <Typography variant="body2" color="text.secondary">
                                {item}
                              </Typography>
                            </Grid>
                          ))}
                        </Grid>
                      </Paper>
                    </Fade>
                  )}
                  
                  <Box sx={{ display: 'flex', gap: 2, flexDirection: { xs: 'column', sm: 'row' } }}>
                    <Button
                      onClick={handleSubmit}
                      variant="contained"
                      size="large"
                      disabled={loading || !fullName || !birthDate || !!nameError || !!dateError}
                      sx={{ 
                        flex: 1,
                        py: isMobile ? 2 : 1.5,
                        px: isMobile ? 3 : 2,
                        fontSize: isMobile ? '16px' : '14px',
                        minHeight: isMobile ? 48 : 'auto',
                        fontWeight: 'bold',
                        borderRadius: 2,
                        background: 'linear-gradient(45deg, #2196F3 30%, #21CBF3 90%)',
                        '&:hover': {
                          background: 'linear-gradient(45deg, #1976D2 30%, #1CB5E0 90%)',
                          transform: isTouchDevice ? 'none' : 'translateY(-1px)',
                          boxShadow: 4
                        },
                        '&:active': {
                          transform: isTouchDevice ? 'scale(0.98)' : 'translateY(-1px)'
                        },
                        transition: 'all 0.3s ease'
                      }}
                      startIcon={loading ? <CircularProgress size={20} color="inherit" /> : <AutoAwesome />}
                    >
                      {loading ? 'ƒêang t√≠nh to√°n...' : 'üîÆ Ph√¢n T√≠ch Th·∫ßn S·ªë H·ªçc'}
                    </Button>

                    <Tooltip title="X√≥a t·∫•t c·∫£ v√† b·∫Øt ƒë·∫ßu l·∫°i">
                      <Button
                        variant="outlined"
                        size="large"
                        onClick={clearForm}
                        disabled={loading}
                        sx={{ 
                          py: isMobile ? 2 : 1.5,
                          px: isMobile ? 3 : 2,
                          fontSize: isMobile ? '16px' : '14px',
                          minHeight: isMobile ? 48 : 'auto',
                          fontWeight: 'bold',
                          borderRadius: 2,
                          '&:hover': {
                            transform: isTouchDevice ? 'none' : 'translateY(-1px)',
                            boxShadow: 2
                          },
                          '&:active': {
                            transform: isTouchDevice ? 'scale(0.98)' : 'translateY(-1px)'
                          },
                          transition: 'all 0.3s ease'
                        }}
                        startIcon={<Clear />}
                      >
                        üîÑ L√†m l·∫°i
                      </Button>
                    </Tooltip>
                  </Box>
                </StepContent>
              </Step>
            </Stepper>

            {/* Quick Info Section */}
            <Divider sx={{ my: 4 }} />
            
            <Box sx={{ textAlign: 'center' }}>
              <Typography variant="h6" gutterBottom color="primary" sx={{ mb: 3 }}>
                <Help sx={{ mr: 1, verticalAlign: 'middle' }} />
                ‚ú® Th√¥ng Tin V·ªÅ Th·∫ßn S·ªë H·ªçc
              </Typography>
              
              <Grid container spacing={3}>
                {[
                  { icon: 'üî¢', title: 'S·ªë ƒê∆∞·ªùng ƒê·ªùi', desc: 'Ti·∫øt l·ªô m·ª•c ƒë√≠ch v√† h∆∞·ªõng ƒëi trong cu·ªôc s·ªëng' },
                  { icon: 'üéØ', title: 'S·ªë S·ª© M·ªánh', desc: 'Kh√°m ph√° t√†i nƒÉng v√† kh·∫£ nƒÉng thi√™n b·∫©m' },
                  { icon: 'üíº', title: 'H∆∞·ªõng Nghi·ªáp', desc: 'G·ª£i √Ω ngh·ªÅ nghi·ªáp ph√π h·ª£p v·ªõi b·∫£n th√¢n' },
                  { icon: 'üìä', title: 'Ph√¢n T√≠ch T∆∞∆°ng Th√≠ch', desc: 'ƒê√°nh gi√° kh·∫£ nƒÉng l√†m vi·ªác nh√≥m v√† l√£nh ƒë·∫°o' }
                ].map((item, index) => (
                  <Grid item xs={12} sm={6} md={3} key={index}>
                    <Paper 
                      elevation={1} 
                      sx={{ 
                        p: 2, 
                        height: '100%', 
                        borderRadius: 2,
                        transition: 'all 0.3s ease',
                        '&:hover': {
                          elevation: 4,
                          transform: 'translateY(-2px)'
                        }
                      }}
                    >
                      <Typography variant="h4" sx={{ mb: 1 }}>
                        {item.icon}
                      </Typography>
                      <Typography variant="subtitle2" color="primary" gutterBottom>
                        <strong>{item.title}</strong>
                      </Typography>
                      <Typography variant="body2" color="text.secondary">
                        {item.desc}
                      </Typography>
                    </Paper>
                  </Grid>
                ))}
              </Grid>
            </Box>
          </CardContent>
        </Card>
      </Slide>
    </Box>
  );
};

export default EnhancedNumerologyForm;