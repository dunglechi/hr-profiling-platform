import React, { useState } from 'react';
import {
  Box,
  Card,
  CardContent,
  Typography,
  TextField,
  Button,
  Alert,
  CircularProgress,
  Grid,
  Divider,
  Fade,
  Paper,
  Chip
} from '@mui/material';
import { Psychology, Person, CalendarToday, AutoAwesome } from '@mui/icons-material';
import { format } from 'date-fns';

interface SimpleEnhancedFormProps {
  onCalculate: (fullName: string, birthDate: Date) => void;
  loading?: boolean;
  error?: string;
}

const SimpleEnhancedForm: React.FC<SimpleEnhancedFormProps> = ({ 
  onCalculate, 
  loading = false, 
  error 
}) => {
  const [fullName, setFullName] = useState('');
  const [birthDate, setBirthDate] = useState('');
  const [nameError, setNameError] = useState('');
  const [dateError, setDateError] = useState('');

  const validateName = (name: string): boolean => {
    if (!name.trim()) {
      setNameError('Vui l√≤ng nh·∫≠p h·ªç t√™n');
      return false;
    }
    if (name.trim().length < 2) {
      setNameError('H·ªç t√™n ph·∫£i c√≥ √≠t nh·∫•t 2 k√Ω t·ª±');
      return false;
    }
    if (!/^[a-zA-Z√Ä-·ªπƒêƒë\s]+$/.test(name.trim())) {
      setNameError('H·ªç t√™n ch·ªâ ƒë∆∞·ª£c ch·ª©a ch·ªØ c√°i v√† kho·∫£ng tr·∫Øng');
      return false;
    }
    setNameError('');
    return true;
  };

  const validateDate = (dateString: string): boolean => {
    if (!dateString) {
      setDateError('Vui l√≤ng ch·ªçn ng√†y sinh');
      return false;
    }
    const date = new Date(dateString);
    if (date > new Date()) {
      setDateError('Ng√†y sinh kh√¥ng th·ªÉ l√† t∆∞∆°ng lai');
      return false;
    }
    if (date < new Date('1900-01-01')) {
      setDateError('Ng√†y sinh kh√¥ng h·ª£p l·ªá');
      return false;
    }
    setDateError('');
    return true;
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    const nameValid = validateName(fullName);
    const dateValid = validateDate(birthDate);
    
    if (nameValid && dateValid) {
      onCalculate(fullName.trim(), new Date(birthDate));
    }
  };

  const handleNameChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    setFullName(value);
    if (nameError && value) {
      setNameError('');
    }
  };

  const handleDateChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    setBirthDate(value);
    if (dateError && value) {
      setDateError('');
    }
  };

  const clearForm = () => {
    setFullName('');
    setBirthDate('');
    setNameError('');
    setDateError('');
  };

  return (
    <Box sx={{ maxWidth: 700, mx: 'auto', p: 3 }}>
      <Fade in timeout={800}>
        <Card elevation={8} sx={{ 
          borderRadius: 3,
          background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
          color: 'white',
          mb: 3
        }}>
          <CardContent sx={{ textAlign: 'center', py: 4 }}>
            <Psychology sx={{ fontSize: 48, mb: 2, opacity: 0.9 }} />
            <Typography variant="h3" gutterBottom sx={{ fontWeight: 'bold', mb: 1 }}>
              ‚ú® Th·∫ßn S·ªë H·ªçc AI Pro
            </Typography>
            <Typography variant="h6" sx={{ opacity: 0.9, maxWidth: 500, mx: 'auto' }}>
              Tr·∫£i nghi·ªám n√¢ng c·∫•p v·ªõi UI/UX hi·ªán ƒë·∫°i v√† ph√¢n t√≠ch th√¥ng minh
            </Typography>
          </CardContent>
        </Card>
      </Fade>

      <Card elevation={4} sx={{ borderRadius: 3 }}>
        <CardContent sx={{ p: 4 }}>
          {error && (
            <Fade in>
              <Alert severity="error" sx={{ mb: 3, borderRadius: 2 }}>
                {error}
              </Alert>
            </Fade>
          )}

          <Typography variant="h5" gutterBottom color="primary" sx={{ mb: 3, textAlign: 'center' }}>
            <AutoAwesome sx={{ mr: 1, verticalAlign: 'middle' }} />
            B·∫Øt ƒê·∫ßu Ph√¢n T√≠ch Th·∫ßn S·ªë H·ªçc
          </Typography>

          <form onSubmit={handleSubmit}>
            <Grid container spacing={3}>
              <Grid item xs={12}>
                <TextField
                  fullWidth
                  label="H·ªç v√† t√™n ƒë·∫ßy ƒë·ªß"
                  placeholder="V√≠ d·ª•: Nguy·ªÖn VƒÉn An"
                  value={fullName}
                  onChange={handleNameChange}
                  error={!!nameError}
                  helperText={nameError || 'Nh·∫≠p h·ªç t√™n nh∆∞ trong gi·∫•y t·ªù t√πy th√¢n'}
                  variant="outlined"
                  disabled={loading}
                  InputProps={{
                    startAdornment: <Person color="primary" sx={{ mr: 1 }} />,
                  }}
                  sx={{
                    '& .MuiOutlinedInput-root': {
                      borderRadius: 2,
                      '&:hover fieldset': {
                        borderColor: 'primary.main',
                      }
                    }
                  }}
                />
              </Grid>

              <Grid item xs={12}>
                <TextField
                  fullWidth
                  label="Ng√†y sinh"
                  type="date"
                  value={birthDate}
                  onChange={handleDateChange}
                  error={!!dateError}
                  helperText={dateError || 'Ch·ªçn ng√†y sinh ch√≠nh x√°c ƒë·ªÉ c√≥ k·∫øt qu·∫£ t·ªët nh·∫•t'}
                  variant="outlined"
                  disabled={loading}
                  InputLabelProps={{ shrink: true }}
                  InputProps={{
                    startAdornment: <CalendarToday color="primary" sx={{ mr: 1 }} />,
                  }}
                  inputProps={{
                    max: format(new Date(), 'yyyy-MM-dd'),
                    min: '1900-01-01'
                  }}
                  sx={{
                    '& .MuiOutlinedInput-root': {
                      borderRadius: 2,
                      '&:hover fieldset': {
                        borderColor: 'primary.main',
                      }
                    }
                  }}
                />
              </Grid>

              {fullName && birthDate && !nameError && !dateError && (
                <Grid item xs={12}>
                  <Fade in timeout={600}>
                    <Paper elevation={2} sx={{ p: 3, borderRadius: 2, bgcolor: 'primary.50' }}>
                      <Typography variant="h6" color="primary" gutterBottom>
                        <Psychology sx={{ mr: 1, verticalAlign: 'middle' }} />
                        S·∫µn S√†ng Ph√¢n T√≠ch
                      </Typography>
                      
                      <Box sx={{ display: 'flex', gap: 1, mb: 2, flexWrap: 'wrap' }}>
                        <Chip
                          icon={<Person />}
                          label={`H·ªç t√™n: ${fullName}`}
                          color="primary"
                          variant="outlined"
                        />
                        <Chip
                          icon={<CalendarToday />}
                          label={`Ng√†y sinh: ${new Date(birthDate).toLocaleDateString('vi-VN')}`}
                          color="primary"
                          variant="outlined"
                        />
                      </Box>

                      <Typography variant="body2" color="text.secondary">
                        üîç <strong>Ph√¢n t√≠ch s·∫Ω bao g·ªìm:</strong><br />
                        ‚Ä¢ C√°c s·ªë c·ªët l√µi (ƒê∆∞·ªùng ƒë·ªùi, S·ª© m·ªánh, Nh√¢n c√°ch, Linh h·ªìn)<br />
                        ‚Ä¢ T∆∞ v·∫•n ngh·ªÅ nghi·ªáp v√† phong c√°ch l√†m vi·ªác<br />
                        ‚Ä¢ Ph√¢n t√≠ch t∆∞∆°ng th√≠ch v√† kh·∫£ nƒÉng l√£nh ƒë·∫°o<br />
                        ‚Ä¢ Chu k·ª≥ ph√°t tri·ªÉn theo t·ª´ng giai ƒëo·∫°n cu·ªôc ƒë·ªùi
                      </Typography>
                    </Paper>
                  </Fade>
                </Grid>
              )}

              <Grid item xs={12}>
                <Box sx={{ display: 'flex', gap: 2, flexDirection: { xs: 'column', sm: 'row' } }}>
                  <Button
                    type="submit"
                    variant="contained"
                    size="large"
                    disabled={loading || !fullName || !birthDate || !!nameError || !!dateError}
                    sx={{ 
                      flex: 1,
                      py: 1.5,
                      fontWeight: 'bold',
                      borderRadius: 2,
                      background: 'linear-gradient(45deg, #2196F3 30%, #21CBF3 90%)',
                      '&:hover': {
                        background: 'linear-gradient(45deg, #1976D2 30%, #1CB5E0 90%)',
                        transform: 'translateY(-1px)',
                        boxShadow: 4
                      },
                      transition: 'all 0.3s ease'
                    }}
                    startIcon={loading ? <CircularProgress size={20} color="inherit" /> : <AutoAwesome />}
                  >
                    {loading ? 'ƒêang ph√¢n t√≠ch...' : 'üîÆ B·∫Øt ƒê·∫ßu Ph√¢n T√≠ch'}
                  </Button>

                  <Button
                    variant="outlined"
                    size="large"
                    onClick={clearForm}
                    disabled={loading}
                    sx={{ 
                      py: 1.5,
                      fontWeight: 'bold',
                      borderRadius: 2,
                      '&:hover': {
                        transform: 'translateY(-1px)',
                        boxShadow: 2
                      },
                      transition: 'all 0.3s ease'
                    }}
                  >
                    üîÑ L√†m l·∫°i
                  </Button>
                </Box>
              </Grid>
            </Grid>
          </form>

          <Divider sx={{ my: 4 }} />
          
          <Box sx={{ textAlign: 'center' }}>
            <Typography variant="h6" gutterBottom color="primary" sx={{ mb: 3 }}>
              ‚ú® T√≠nh NƒÉng N√¢ng C·∫•p
            </Typography>
            
            <Grid container spacing={3}>
              {[
                { icon: 'üéØ', title: 'AI Th√¥ng Minh', desc: 'Ph√¢n t√≠ch s√¢u v·ªõi c√¥ng ngh·ªá AI hi·ªán ƒë·∫°i' },
                { icon: 'üìä', title: 'Bi·ªÉu ƒê·ªì Tr·ª±c Quan', desc: 'Hi·ªÉn th·ªã k·∫øt qu·∫£ qua charts v√† infographics' },
                { icon: 'üí´', title: 'UX Hi·ªán ƒê·∫°i', desc: 'Giao di·ªán m∆∞·ª£t m√† v·ªõi animations v√† transitions' },
                { icon: 'üåê', title: 'ƒêa Ng√¥n Ng·ªØ', desc: 'H·ªó tr·ª£ ti·∫øng Vi·ªát, Anh v√† m·ªü r·ªông th√™m' }
              ].map((item, index) => (
                <Grid item xs={12} sm={6} md={3} key={index}>
                  <Paper 
                    elevation={1} 
                    sx={{ 
                      p: 2, 
                      height: '100%', 
                      borderRadius: 2,
                      textAlign: 'center',
                      transition: 'all 0.3s ease',
                      '&:hover': {
                        elevation: 4,
                        transform: 'translateY(-2px)'
                      }
                    }}
                  >
                    <Typography variant="h4" sx={{ mb: 1 }}>
                      {item.icon}
                    </Typography>
                    <Typography variant="subtitle2" color="primary" gutterBottom>
                      <strong>{item.title}</strong>
                    </Typography>
                    <Typography variant="body2" color="text.secondary">
                      {item.desc}
                    </Typography>
                  </Paper>
                </Grid>
              ))}
            </Grid>
          </Box>
        </CardContent>
      </Card>
    </Box>
  );
};

export default SimpleEnhancedForm;